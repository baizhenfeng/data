__author__ = 'lzy'
# image_input.py

import cv2
from keras.utils import Sequence
import math
import numpy as np
from random import shuffle, randint

import os


class SequenceData(Sequence):
    def __init__(self, file_list, batch_size, target_size, mode='caffe'):
        self.file_list = file_list
        self.batch_size = batch_size
        self.target_size = target_size
        self.mode = mode

    def __len__(self):
        num_imgs = len(self.file_list)
        return math.ceil(num_imgs / self.batch_size)

    def __getitem__(self, idx):
        file_sub_list = self.file_list[idx*self.batch_size : (idx+1)*self.batch_size]
        batch_x = np.array([self.read_img(file[0]) for file in file_sub_list])
        batch_y = np.array([file[1] for file in file_sub_list], dtype=np.float32)
        return batch_x, batch_y

    def read_img(self, file_name):
        file_path = os.path.join('data/Images', file_name)
        try:
            img = cv2.imread(file_path)
            img = cv2.resize(img, self.target_size)
            # 象征性的做一点数据增广
            # 随机对图像进行数据翻转
            if randint(0, 1):
                img = img[:, ::-1, :]
            img = np.array(img, dtype=np.float32)
            if self.mode == 'caffe':
                img[:, :, 0] -= 103.939
                img[:, :, 1] -= 116.779
                img[:, :, 2] -= 123.68
            elif self.mode == 'tf':
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                img = img / 127.5 - 1.0


        except Exception as e:
            print(e)
        else:
            return img


def read_file_list(train_test_split_ratio=0.8):
    with open('data/train_test_files/SCUT-FBP5500.txt', 'r') as f:
        file_list = f.read()

    file_list = file_list.split('\n')[:-1]
    file_list = [file.split(' ') for file in file_list]
    # 将颜值分数归一化到[0, 1]之间
    file_list = [(file[0], 0.2 * float(file[1])) for file in file_list]
    shuffle(file_list)
    train_len = int(len(file_list) * train_test_split_ratio)
    train_file_list = file_list[:train_len]
    test_file_list = file_list[train_len:]
    return train_file_list, test_file_list


if __name__ == '__main__':
    read_file_list()
